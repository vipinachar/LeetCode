'''

Given an integer array with many duplicated elements, efficiently sort it in linear time.

Input : [4, 2, 40, 10, 10, 1, 4, 2, 1, 10, 40]
Output: [1, 1, 2, 2, 4, 4, 10, 10, 10, 40, 40]

Constraints:

• The input elements lie in the range [0, 1000].
• The relative order of equal elements doesn't matter.
• The sorting should be done in-place.

'''



class Solution:
	def sort(self, nums: List[int]) -> None:
		# Write your code here...
		#  Time O(N) 
		# Space O(N)
		frequency = [0] * 11 
		n = len(nums)
		aux = [0] * n 
		
		divideBy = 1 
		while divideBy <= 121:
		
			for index_nums in range(0,n):
				digit = (nums[index_nums]//divideBy)%11 
				frequency[digit] += 1 
		
			for index in range(1,11):
				frequency[index] += frequency[index-1]
		
			for index in range(n-1,-1,-1):
				number = nums[index]
				digit = (number//divideBy)%11 
				frequency_digit = frequency[digit]
				aux[frequency_digit-1] = number
				frequency[digit] -= 1
		
			for i in range(0,n):
				nums[i] = aux[i]
			
		
			for i in range(0,11):
				frequency[i] = 0 
		
			divideBy = divideBy * 11 
			
		
		
		return

